// Generated by CoffeeScript 2.3.1
(function() {
  jQuery(function($) {
    var behaviors, font, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, shortcuts;
    $('[data-i18n-key]').each(function(idx, elem) {
      var key, method, translated;
      elem = $(elem);
      key = elem.attr('data-i18n-key');
      method = elem.attr('data-i18n-method') || 'text';
      translated = chrome.i18n.getMessage(key);
      return elem[method](translated || `translation missing: ${key}`);
    });
    behaviors = JSON.parse(localStorage.behaviors || '{}');
    shortcuts = JSON.parse(localStorage.shortcuts || '{}');
    font = JSON.parse(localStorage.font || '{}');
    window.options = {
      width: parseInt(localStorage.width) || 300,
      height: parseInt(localStorage.height) || 400,
      font: {
        fontFace: font.fontFace || 'inherit',
        fontSize: font.fontSize || '80%'
      },
      customStyle: localStorage.customStyle || '',
      behaviors: {
        bookmark: {
          left: ((ref = behaviors.bookmark) != null ? ref.left : void 0) || 'openInNewTab',
          middle: ((ref1 = behaviors.bookmark) != null ? ref1.middle : void 0) || 'openInCurrentTab',
          right: ((ref2 = behaviors.bookmark) != null ? ref2.right : void 0) || 'openInBackgroundTab'
        },
        directory: {
          left: ((ref3 = behaviors.directory) != null ? ref3.left : void 0) || 'toggle',
          middle: ((ref4 = behaviors.directory) != null ? ref4.middle : void 0) || 'openAllInCurrentWindow',
          right: ((ref5 = behaviors.directory) != null ? ref5.right : void 0) || 'openAllInNewWindow'
        }
      },
      shortcuts: {
        disable: shortcuts.disable,
        openBookmarkTreeInNewTab: {
          modifier: ((ref6 = shortcuts.openBookmarkTreeInNewTab) != null ? ref6.modifier : void 0) || 'alt',
          key: ((ref7 = shortcuts.openBookmarkTreeInNewTab) != null ? ref7.key : void 0) || 'b'
        },
        openBookmarkTreeInNewWindow: {
          modifier: ((ref8 = shortcuts.openBookmarkTreeInNewWindow) != null ? ref8.modifier : void 0) || 'alt',
          key: ((ref9 = shortcuts.openBookmarkTreeInNewWindow) != null ? ref9.key : void 0) || 'w'
        }
      },
      rememberOpenedDirectory: localStorage.rememberOpenedDirectory === 'true',
      hideScrollbar: localStorage.hideScrollbar === 'true',
      closePopupAfterOpenBookmark: localStorage.closePopupAfterOpenBookmark === 'true',
      moveDirectoriesToListTop: localStorage.moveDirectoriesToListTop === 'true',
      sortBy: localStorage.sortBy || 'index',
      rootDirectory: localStorage.rootDirectory || '0'
    };
    return window.delay = function(callback) {
      return setTimeout(callback, 10);
    };
  });

}).call(this);
