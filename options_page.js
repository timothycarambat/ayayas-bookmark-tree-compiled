// Generated by CoffeeScript 2.3.1
(function() {
  jQuery(function($) {
    var keys, ref, tmpl, updateBookmarkBehaviors, updateDirectoryBehaviors, updateFont, updateShortcuts;
    tmpl = $('#option-tmpl');
    $('#width').val(options.width).bind('change keypress mousewheel', function() {
      return delay(() => {
        return localStorage.width = parseInt(this.value);
      });
    });
    $('#height').val(options.height).bind('change keypress mousewheel', function() {
      return delay(() => {
        return localStorage.height = parseInt(this.value);
      });
    });
    updateFont = function() {
      var font;
      font = JSON.parse(localStorage.font || '{}');
      font.fontFace = $('#font-face').val();
      font.fontSize = $('#font-size').val();
      return localStorage.font = JSON.stringify(font);
    };
    $('#font-face').val(options.font.fontFace).bind('change keypress', function() {
      return delay(function() {
        return updateFont();
      });
    });
    $('#font-size').val(options.font.fontSize).bind('change keypress', function() {
      return delay(function() {
        return updateFont();
      });
    });
    chrome.bookmarks.getTree(function(nodes) {
      var child, j, len, node, ref, rootDirectory;
      rootDirectory = $('#root-directory');
      while (node = nodes.pop()) {
        if (node.children) {
          if (node.children) {
            ref = node.children;
            for (j = 0, len = ref.length; j < len; j++) {
              child = ref[j];
              nodes.push(child);
            }
          }
          if (node.id === '0') {
            node.title = '(root)';
          }
          rootDirectory.append(tmpl.tmpl({
            value: node.id,
            title: node.title
          }));
        }
      }
      return $('#root-directory').val(options.rootDirectory).change(function() {
        return delay(() => {
          return localStorage.rootDirectory = this.value;
        });
      });
    });
    $('#remember-opened-directory').attr('checked', options.rememberOpenedDirectory).change(function() {
      return delay(() => {
        return localStorage.rememberOpenedDirectory = this.checked;
      });
    });
    updateBookmarkBehaviors = function() {
      var behaviors;
      behaviors = JSON.parse(localStorage.behaviors || '{}');
      behaviors.bookmark = {
        left: $('#behaviors-bookmark-left').val(),
        middle: $('#behaviors-bookmark-middle').val(),
        right: $('#behaviors-bookmark-right').val()
      };
      return localStorage.behaviors = JSON.stringify(behaviors);
    };
    $('#behaviors-bookmark-left').val(options.behaviors.bookmark.left).change(updateBookmarkBehaviors);
    $('#behaviors-bookmark-middle').val(options.behaviors.bookmark.middle).change(updateBookmarkBehaviors);
    $('#behaviors-bookmark-right').val(options.behaviors.bookmark.right).change(updateBookmarkBehaviors);
    updateDirectoryBehaviors = function() {
      var behaviors;
      behaviors = JSON.parse(localStorage.behaviors || '{}');
      behaviors.directory = {
        left: $('#behaviors-directory-left').val(),
        middle: $('#behaviors-directory-middle').val(),
        right: $('#behaviors-directory-right').val()
      };
      return localStorage.behaviors = JSON.stringify(behaviors);
    };
    $('#behaviors-directory-left').val(options.behaviors.directory.left).change(updateDirectoryBehaviors);
    $('#behaviors-directory-middle').val(options.behaviors.directory.middle).change(updateDirectoryBehaviors);
    $('#behaviors-directory-right').val(options.behaviors.directory.right).change(updateDirectoryBehaviors);
    $('#custom-style').val(options.customStyle).bind('change keypress mousewheel', function() {
      return delay(() => {
        return localStorage.customStyle = this.value;
      });
    });
    keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';
    (function() {
      var results = [];
      for (var j = 0, ref = keys.length; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this).forEach(function(i) {
      $('#open-bookmark-tree-in-new-tab-key').append(tmpl.tmpl({
        value: keys.charAt(i).toLowerCase(),
        title: keys.charAt(i)
      }));
      return $('#open-bookmark-tree-in-new-window-key').append(tmpl.tmpl({
        value: keys.charAt(i).toLowerCase(),
        title: keys.charAt(i)
      }));
    });
    updateShortcuts = function() {
      var shortcuts;
      shortcuts = JSON.parse(localStorage.shortcuts || '{}');
      shortcuts.disable = $('#disable-shortcuts').attr('checked');
      shortcuts.openBookmarkTreeInNewTab = {
        modifier: $('#open-bookmark-tree-in-new-tab-modifier').val(),
        key: $('#open-bookmark-tree-in-new-tab-key').val()
      };
      shortcuts.openBookmarkTreeInNewWindow = {
        modifier: $('#open-bookmark-tree-in-new-window-modifier').val(),
        key: $('#open-bookmark-tree-in-new-window-key').val()
      };
      return localStorage.shortcuts = JSON.stringify(shortcuts);
    };
    $('#disable-shortcuts').attr('checked', !!options.shortcuts.disable).change(updateShortcuts);
    $('#open-bookmark-tree-in-new-tab-modifier').val(options.shortcuts.openBookmarkTreeInNewTab.modifier).change(updateShortcuts);
    $('#open-bookmark-tree-in-new-tab-key').val(options.shortcuts.openBookmarkTreeInNewTab.key).change(updateShortcuts);
    $('#open-bookmark-tree-in-new-window-modifier').val(options.shortcuts.openBookmarkTreeInNewWindow.modifier).change(updateShortcuts);
    $('#open-bookmark-tree-in-new-window-key').val(options.shortcuts.openBookmarkTreeInNewWindow.key).change(updateShortcuts);
    $('#hide-scrollbar').attr('checked', options.hideScrollbar).change(function() {
      return delay(() => {
        return localStorage.hideScrollbar = this.checked;
      });
    });
    $('#close-popup-after-open-bookmark').attr('checked', options.closePopupAfterOpenBookmark).change(function() {
      return delay(() => {
        return localStorage.closePopupAfterOpenBookmark = this.checked;
      });
    });
    $('#move-directories-to-list-top').attr('checked', options.moveDirectoriesToListTop).change(function() {
      return delay(() => {
        return localStorage.moveDirectoriesToListTop = this.checked;
      });
    });
    return $('#sort-by').val(options.sortBy).change(function() {
      return delay(() => {
        return localStorage.sortBy = this.value;
      });
    });
  });

}).call(this);
